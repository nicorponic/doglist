{"version":3,"sources":["components/DogsList.js","components/DogsListContainer.js","components/DogBreedImages.js","components/DogBreedImagesContainer.js","App.js","serviceWorker.js","index.js"],"names":["DogsList","breed","react_default","a","createElement","key","Link","to","concat","dogBreeds","this","props","className","map","renderDogBreed","Component","DogsListContainer","state","_this2","request","get","then","response","breeds","Object","keys","body","message","updateBreeds","catch","console","error","setState","DogsList_DogsList","DogBreedImages","images","name","url","src","alt","match","params","updateImages","App","Route","exact","path","component","DogBreedImagesContainer","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RAGqBA,yLACJC,GACb,OACEC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GACPC,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAE,eAAAC,OAAiBP,IAAUA,qCAKhC,IACCQ,EAAcC,KAAKC,MAAnBF,UACR,OACEP,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,aACbV,EAAAC,EAAAC,cAAA,uBAECK,GAAaP,EAAAC,EAAAC,cAAA,UAAKK,EAAUI,IAAIH,KAAKI,yBAfRC,aCCjBC,6MACnBC,MAAQ,CAAER,UAAW,yFAED,IAAAS,EAAAR,KAClBS,IACGC,IAAI,uCACJC,KAAK,SAAAC,GACJ,IAAMC,EAASC,OAAOC,KAAKH,EAASI,KAAKC,SACzCT,EAAKU,aAAaL,KAEnBM,MAAMC,QAAQC,4CAGNR,GACXb,KAAKsB,SAAS,CACZvB,UAAWc,qCAKb,OAAOrB,EAAAC,EAAAC,cAAC6B,EAAD,CAAUxB,UAAWC,KAAKO,MAAMR,mBApBIM,qBCDhC,SAASmB,EAAevB,GACnC,IAAMwB,EAASxB,EAAMwB,OACvB,OACEjC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,oBACbV,EAAAC,EAAAC,cAAA,+BADF,qCAEqCO,EAAMyB,KAF3C,UAGElC,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,wBACAL,EAAAC,EAAAC,cAAA,WACG+B,GAAUA,EAAOtB,IAAI,SAAAwB,GAAG,OAAInC,EAAAC,EAAAC,cAAA,OAAKkC,IAAKD,EAAKE,IAAI,WAC9CJ,GAAU,mBCRCnB,6MACnBC,MAAQ,CAAEkB,OAAQ,yFAEE,IAAAjB,EAAAR,KACZT,EAAQS,KAAKC,MAAM6B,MAAMC,OAAOxC,MACtCkB,IACGC,IADH,6BAAAZ,OACoCP,EADpC,YAEGoB,KAAK,SAAAC,GAAQ,OAAIJ,EAAKwB,aAAapB,EAASI,KAAKC,WACjDE,MAAMC,QAAQC,4CAGNI,GACXzB,KAAKsB,SAAS,CACZG,OAAQA,qCAKV,OAAOjC,EAAAC,EAAAC,cAAC8B,EAAD,CAAgBC,OAAQzB,KAAKO,MAAMkB,OAAQC,KAAM1B,KAAKC,MAAM6B,MAAMC,OAAOxC,eAlBrCc,aCiBhC4B,mLAXX,OACEzC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/B,IACjCd,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAOE,KAAK,qBAAqBC,UAAWC,aANpCjC,aCIEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,uECXNa,IAASC,OACPpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,KACErD,EAAAC,EAAAC,cAACoD,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.a0c43c0b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default class DogsList extends Component {\n  renderDogBreed(breed) {\n    return (\n      <li key={breed}>\n        <Link to={`/dog-breeds/${breed}`}>{breed}</Link>\n      </li>\n    );\n  }\n\n  render() {\n    const { dogBreeds } = this.props;\n    return (\n      <div className=\"dogs-list\">\n        <h1>Dogs List</h1>\n\n        {dogBreeds && <ul>{dogBreeds.map(this.renderDogBreed)}</ul>}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport request from \"superagent\";\nimport DogsList from \"./DogsList\";\n\nexport default class DogsListContainer extends Component {\n  state = { dogBreeds: null };\n\n  componentDidMount() {\n    request\n      .get(\"https://dog.ceo/api/breeds/list/all\")\n      .then(response => {\n        const breeds = Object.keys(response.body.message);\n        this.updateBreeds(breeds);\n      })\n      .catch(console.error);\n  }\n\n  updateBreeds(breeds) {\n    this.setState({\n      dogBreeds: breeds\n    });\n  }\n\n  render() {\n    return <DogsList dogBreeds={this.state.dogBreeds} />;\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function DogBreedImages(props) {\n    const images = props.images\n  return (\n    <div className=\"dog-breed-images\">\n      <h1>Dogs Breed Images</h1>\n      This page will show images of the {props.name} breed.\n      <Link to=\"/\">Go back to the index</Link>\n      <div>\n        {images && images.map(url => <img src={url} alt=\"Dog\" />)}\n        {!images && \"Loading...\"}\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport DogBreedImages from \"./DogBreedImages\";\nimport request from \"superagent\";\n\nexport default class DogsListContainer extends Component {\n  state = { images: null };\n\n  componentDidMount() {\n    const breed = this.props.match.params.breed;\n    request\n      .get(`https://dog.ceo/api/breed/${breed}/images`)\n      .then(response => this.updateImages(response.body.message))\n      .catch(console.error);\n  }\n\n  updateImages(images) {\n    this.setState({\n      images: images\n    });\n  }\n\n  render() {\n    return <DogBreedImages images={this.state.images} name={this.props.match.params.breed} />;\n  }\n}\n","import React, { Component } from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\nimport DogsListContainer from \"./components/DogsListContainer\";\nimport { Route } from \"react-router-dom\";\n//import DogBreedImages from \"./components/DogBreedImages\"\nimport DogBreedImagesContainer from \"./components/DogBreedImagesContainer\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <main>\n          <Route exact path=\"/\" component={DogsListContainer} />\n          <Route path=\"/dog-breeds/:breed\" component={DogBreedImagesContainer} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}